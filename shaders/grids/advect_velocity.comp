#version 440 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform float dt;

layout(binding = 0) uniform sampler2D velocity_READ;
layout(rgba32f, binding = 1) uniform image2D velocity_WRITE;

// Sample a texture2D like an image2D
vec4 textureLoad(sampler2D tex, vec2 coords) {
    ivec2 size = textureSize(tex, 0);
    return texture(tex, coords/vec2(size));
}

void main() {
    vec2 texelCoords = vec2(gl_GlobalInvocationID.xy);
    
    // Work backwards

    // Step 1: Get edges
    float L = textureLoad(velocity_READ, texelCoords - vec2(1,0)).x;
    float R = textureLoad(velocity_READ, texelCoords).x;
    float T = textureLoad(velocity_READ, texelCoords - vec2(0,1)).y;
    float B = textureLoad(velocity_READ, texelCoords).y;

    // Step 2: Create velocity vector
    vec2 V = vec2(L + R, T + B);

    // Step 3: Get source coords
    vec2 sourceCoords = texelCoords - V;

    // Step 4: Read source
    L = textureLoad(velocity_READ, sourceCoords - vec2(1,0)).x;
    R = textureLoad(velocity_READ, sourceCoords).x;
    T = textureLoad(velocity_READ, sourceCoords - vec2(0,1)).y;
    B = textureLoad(velocity_READ, sourceCoords).y;

    // Step 5: Write edges
    vec4 LCell = textureLoad(velocity_READ, texelCoords - vec2(1,0));
    LCell.x = L;

    vec4 TCell = textureLoad(velocity_READ, texelCoords + vec2(0,1));
    TCell.y = T;

    vec4 CCell = textureLoad(velocity_READ, texelCoords);
    CCell.x = R;
    CCell.y = B;

    imageStore(velocity_WRITE, ivec2(texelCoords) - ivec2(1,0), LCell);
    imageStore(velocity_WRITE, ivec2(texelCoords) - ivec2(0,1), TCell);
    imageStore(velocity_WRITE, ivec2(texelCoords), CCell);
}